add2 <- function(x,y){
x+y
}
add2(3,5)
above <- function(x, n){
use <- x > n
x[ use ]
}
x <- 1:20
n <- 12
above(x,n)
columnmean <- funciton(y){
nc <- ncol(y)
means <- nummeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y){
nc <- ncol(y)
means <- nummeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- funciton(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
numeric(1)
numeric(23)
numeric(3)
numeric(3.4)
numeric(3.5)
numeric(3.6)
numeric(5)
ncol(5)
y <- c(1,2,4,5,7)
ncol(y)
q()
plot(x,y,"l",...)
plot(x, y, type="l", ...)
plot(x, y, type = "l", ...)
q()
cube <- function(x,n){
x^3
}
cube(3)
X<-1:10
X
if(X>5){
x<-0
}
f <- function(x) {
g <- function(y) {
y + Z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3){}
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("KernSmooth")
library(KernSmooth)
q()
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
lapply(x, mean)
runif
x <- 1:4
lapply(x ,runif)
x
runif(1)
runif(2)
runif(4)
runif(10)
punif
punif(1)
punif(2)
punif(4)
dunif(1)
dunif(2)
dunif(3)
dunif(0.5)
x <- 1:4
lapply(x, runif, min = 0, max = 10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3,2))
x
lapply(x, function(elt) elt[,1])
elt[,1]
x
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
rnorm
x
sapply(x, mean)
x
mean(x)
x <- matric(rnorm(200),20,10)
x <- matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,mean)
x <- matrix(rnorm(200), 20, 10)
x
rnorm(200)
apply(x,1,quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2, 2, 10))
a
apply(a, c(1,2), mean)
rowMeans(a, dims=2)
rep(1,4)
rep(2,3)
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5,1,2)
rnorm
rnorm(5)
rnorm(5, 1)
mean(rnorm(5,1))
mean(rnorm(5,1))
rnorm(1:5, 1:5, 2)
noise
mapply(noise, 1:5, 1:5, 2)
list(noise(1, 1, 2), noise(2, 2, 2), noise(3, 3, 2), noise(4, 4, 2), noise(5, 5, 2))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
rnorm
gl
gl(3, 10)
gl(3, 10)
f <- gl(3,10)
tapply(x,f)
tapply(x,f, mean)
tapply(x,f, mean, simplify=FALSE)
range
range(1:10)
range(c(4,3))
q()
gl(3, 10)
typeof(gl(3,10))
rnorm(10,1)
rnorm
mean(rnorm(10,1))
mean(rnorm(10,0))
mean(rnorm(10,0))
mean(rnorm(10,1))
mean(rnorm(10,1))
mean(rnorm(10,1))
mean(rnorm(10,1))
mean(rnorm(10,2))
mean(rnorm(10,2))
mean(rnorm(10,2))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f<-gl(3,10)
split(x, f)
x
traceback()
mwan(x)
mean(x)
traceback()
lm(y~x)
traceback()
mean(x)
x <- log(-1)
mean(x)
traceback()
debug(lm)
lm
library(datasets)
data(iris)
?iris
iris
iris[[Specious]]
iris[[Species]]
iris$Species
typeof(iris)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mpg, cyl, mean)
split(mtcars, mtcars$cyl)
iris
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
1
q()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
numeric
numeric(1)
numeric(2)
numeric(3)
x <- x(1:5)
x <- c(1:5)
x
makeVector(x)
makeVector(c(1:5))
x
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x <- makeVector()
x
cachemean(x)
x <- makeVector(c(1:5))
x
x$setmean
cachemean(x)
x
cachemean(x)
cachemean(x)
test <- matrix(3,3)
test
test <- matrix(1:9, nrow=3, ncol=3)
test
solve(test)
test <- matrix(c(1,0,0,0,1,0,0,0,1), nrow=3, ncol=3)
test
solve(test)
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverse <- function(solve) inverseM <<- solve
getInverse <- function() inverseM
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
test
m <- makeCacheMatrix(test)
x
m
solve
solve(test, ...)
test
solve(test)
solve(test, ...)
mean
solve
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverse()
if(!is.null(inverseM)) {
message("getting cached matrix")
return(inverseM)
}
mtx <- x$get()
inverseM <- solve(mtx)
x$setInverse(inverseM)
inverseM
}
m
cacheSolve(test)
cacheSolve(m)
q()
q()
setwd("~/Desktop/PA3/rprog-data-ProgAssignment3-data")
source("util.R")
for (i in 1:10) print(i)
for (i in 1:10) print(i)
for (i in 1:10) print(i)
source("rankall.R"")
""
source("rankall.R")
data.frame(hospital = hospV, state = stateV)
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
a <- data.frame(name=c("A", "B"), b=1:2)
b <- data.frame(a=1:2, b=1:2)
row.names(b) <- a$name
a
b
data.frame(a=1:2, b=3:4, row.name=c("A","B"))
data.frame(a=1:2, b=3:4, row.names=c("A","B"))
source("rankall.R")
tail(rankall("heart failure"), 10)
source("submitscript3.R")
submit()
submit()
submit()
setwd("~/Desktop/PA4 - swirl")
install.packages("swirl")
library(swirl)
rm(list=ls())
swirk()
swirl()
5+7
x <- 5+7
x
y<-x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
mysqrt <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files
)
old.dir
old.dir <- geted()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("/testdir")
setwd("~/Desktop/PA4 - swirl/testdir")
setwd("testdir")
setwd("/testdir")
setwd("/testdir/")
setwd("~/Desktop/PA4 - swirl")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
info()
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
old.dir
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1|20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Chris Hsu")
my_nam
my_name
paste(my_name, " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44 NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 100)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Ing
Inf - Inf
swirl()
info()
main()
bye()
swirl()
q()
